---
title: "Mlflow"
lang: en 
subtitle: "Deploy Models"
author: Jan Kirenz
execute:
  eval: false
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, custom.scss]  
    incremental: false
    transition: slide
    transition-speed: slow
    background-transition: fade
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
   #footer: Setup | Jan Kirenz
---



# Python setup

```{python}

import numpy as np
import mlflow.pyfunc
import mlflow

from pathlib import Path

from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split

```


# Basics

## Deploy the registered model

-After registering the model, you can deploy it to various production environments for serving predictions. 

- MLflow supports multiple deployment options, such as  
  - local deployment
  - deployment to cloud platforms like Microsoft Azure ML, Amazon SageMaker
  - using custom deployment solutions.

## Validate model local

- Before we 

- Run the script `validate_model_local.py` to check if your model behaves as expected


```{python}

"""
Local deployment

"""

import numpy as np
import mlflow.pyfunc

# Load the registered model
MODEL_NAME = "IrisClassifier"
MODEL_VERSION = 3  # Replace with the desired version number

loaded_model = mlflow.pyfunc.load_model(
    model_uri=f"models:/{MODEL_NAME}/{MODEL_VERSION}")

# Use the model for prediction

# Example input for an Iris flower
sample_input = np.array([[5.1, 3.5, 1.4, 0.2]])
prediction = loaded_model.predict(sample_input)
print("Prediction:", prediction)


```


## 

```{python}


# Set the tracking URI to the local 'mlruns' folder (if not already set)
mlflow.set_tracking_uri("file://" + os.path.abspath("mlruns"))

# Replace these placeholders with the appropriate values for your use case
registered_model_name = "your_registered_model_name"
model_version = 1

# Update the model version stage to "Production"
mlflow.tracking.MlflowClient().transition_model_version_stage(
    name=registered_model_name,
    version=model_version,
    stage="Production"
)


```


## MLFlow UI

To mark a specific model version as "Production," you can either use the MLflow UI or the MLflow API.

In the MLflow UI:

Locate the desired model version in the Model Version Management page.
Click on the three-dot menu on the right side of the row for the specific model version.
Select "Transition to -> Production" from the menu.